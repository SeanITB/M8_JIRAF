package com.example.constraintlayout

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import com.example.constraintlayout.ui.theme.ConstraintLayoutTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            ConstraintLayoutTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {

                }
            }
        }
    }
}

@Composable
fun ConstraintLayout() {
    Column {
        ConstraintLayout{
            val (androidIcon, hellowWord, position) = createRefs()
            Box(modifier = Modifier.size(120.dp).background(Color.White).constrainAs(androidIcon){}){
                top.linkTo(parent.top)
                start.linkTo(parent.start)
                bottom.linkTo(parent.bottom)
                end.linkTo(hellowWord.start)
            }
            Box(modifier = Modifier.size(120.dp).background(Color.Yellow).constrainAs(hellowWord){}){
                top.linkTo(parent.top)
                bottom.linkTo(position.top)
                start.linkTo(androidIcon.end)
                end.linkTo(parent.end)
                Text(text = "Hello World!").constrainAs(hellowWord){})
            }
            Box(modifier = Modifier.size(120.dp).background(Color.Yellow).constrainAs(position){}){
                top.linkTo(hellowWord.end)
                bottom.linkTo(parent.bottom)
                start.linkTo(androidIcon.end)
                end.linkTo(parent.end)
            }


            Text(text = "Position").constrainAs(position){})
        }
        ConstraintLayout{
            val (androidIcon, hellowWord, position) = createRefs()
            Box(modifier = Modifier.size(120.dp).background(Color.White).constrainAs(androidIcon){})
            Text(text = "Hello World!").constrainAs(hellowWord){})
            Text(text = "Position").constrainAs(position){})
        }
        ConstraintLayout{

        }
        ConstraintLayout{

        }
    }
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    ConstraintLayoutTheme {

    }
}
