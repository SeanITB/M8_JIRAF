package com.example.diceroller

import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.size
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.diceroller.ui.theme.DiceRollerTheme
import kotlin.random.Random

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            DiceRollerTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    RollTheDice()
                }
            }
        }
    }
}
/* toDo: explicacio Dani
                Column ( verticalArrat = Arrangment.spaceBy(16.dp)
                .constrainAs(boxRed) {
                    width = Dimension.fillToCostrainsts (rev)
                    heigth = " "
                    width = Modifier.fillMaxWidth(o.2f) (%)
                }
                 */

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RollTheDice() {
    var push by rememberSaveable { mutableStateOf(false) }
    var pushFirstDice by rememberSaveable { mutableStateOf(false) }
    var pushSecondDice by rememberSaveable { mutableStateOf(false) }
    var showToast by remember { mutableStateOf(false) }

    val dices: Array<Int> = arrayOf(R.drawable.dice_1, R.drawable.dice_2, R.drawable.dice_3, R.drawable.dice_3, R.drawable.dice_4, R.drawable.dice_5, R.drawable.dice_6)
    var randomIndexFirstDice by remember { mutableStateOf( Random.nextInt(dices.size) ) }
    var randomIndexSecondDice by remember { mutableStateOf( Random.nextInt(dices.size) ) }
    Box(
        modifier = Modifier.fillMaxSize(),
        //horizontalAlignment = Alignment.CenterHorizontally,
        //verticalArrangement = Arrangement.Center
    ){
        Image(
            painter = painterResource(id = R.drawable.tapestry),
            contentDescription = "Fons pantalla",
            contentScale = ContentScale.FillBounds,
            modifier = Modifier.fillMaxSize()
        )
        Column(
            modifier = Modifier.fillMaxSize(),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center//.spaceBy(16.dp)
        ) {
            Image(
                painter = painterResource(id = R.drawable.title),
                contentDescription = "Titul",
                modifier = Modifier.size(300.dp)
            )
            Button(
                onClick  = { push = true },
                //modifier = Modifier.size(100.dp)
            ) {
                Text(text = "ROLL THE DICE")
            }
            Row{
                Image(
                    painter = painterResource(id = dices[randomIndexFirstDice]),
                    contentDescription = "First dice",
                    modifier = Modifier
                        .size(150.dp)
                        .clickable {
                            randomIndexFirstDice = Random.nextInt(dices.size)
                            if ( randomIndexFirstDice == 6 && randomIndexSecondDice == 6) {
                                showToast = true
                            }
                        }
                )
                Image(
                    painter = painterResource(id = dices[randomIndexSecondDice]),
                    contentDescription = "Second dice",
                    modifier = Modifier
                        .size(150.dp)
                        .clickable {
                            randomIndexSecondDice = Random.nextInt(dices.size)
                            if ( randomIndexFirstDice == 6 && randomIndexSecondDice == 6) {
                                showToast = true
                            }
                        }
                )
            }
            if (push == true) {
                randomIndexFirstDice = Random.nextInt(dices.size)
                randomIndexSecondDice = Random.nextInt(dices.size)
                push = false

                /* fixme: Habia intentat eliminar i tornar a posar imatges dels daus
                val randomIndexFirstDice: Int = Random.nextInt(dices.size)
                Image(
                    painter = painterResource(id = dices[randomIndexFirstDice]),
                    contentDescription = "First dice"
                )
                val randomIndexSecondDice: Int = Random.nextInt(dices.size)
                Image(
                    painter = painterResource(id = dices[randomIndexFirstDice]),
                    contentDescription = "Second dice"
                )
                 */
            }
            if (showToast){
                Toast.makeText(LocalContext.current, "JACKPOT!", Toast.LENGTH_SHORT).show()
                showToast = false
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    DiceRollerTheme {
        RollTheDice()
    }
}
