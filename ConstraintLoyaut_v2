package com.example.constraintlayout_v2

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Button
import androidx.compose.material3.Divider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.constraintlayout.compose.ConstraintLayout
import androidx.constraintlayout.compose.Dimension
import com.example.constraintlayout_v2.ui.theme.ConstraintLayout_v2Theme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            ConstraintLayout_v2Theme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    ConstraintLoyout()
                }
            }
        }
    }
}



@Composable
fun ConstraintLoyout() {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.Green),
        //horizontalAlignment = Alignment.CenterHorizontally,
        //verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        ConstraintLayout(
            modifier = Modifier.fillMaxWidth()
        ) {
            val topGuideHeder = createGuidelineFromTop(0.1f)
            val bottomGuideHeder = createGuidelineFromBottom(0.1f)
            val startGuideHeder = createGuidelineFromStart(0.1f)
            val endGuideHeder = createGuidelineFromEnd(0.1f)
            val (icon, helloWorld, position) = createRefs()
            Image(
                painter = painterResource(id = R.drawable.ic_launcher_foreground),
                contentDescription = "Example",
                modifier = Modifier
                    .size(120.dp)
                    .constrainAs(icon) {
                        top.linkTo(topGuideHeder)
                        bottom.linkTo(bottomGuideHeder)
                        start.linkTo(startGuideHeder)
                        end.linkTo(helloWorld.start)
                    })
            Text("Hello World!",
                textAlign = TextAlign.Center,
                modifier = Modifier
                    .width(200.dp)
                    .background(Color.Yellow)
                    .constrainAs(helloWorld) {
                        top.linkTo(topGuideHeder)
                        start.linkTo(icon.end)
                        end.linkTo(endGuideHeder)
                    })
            Text("Position",
                //textHorizontalAlignment = Alignment.CenterHorizontally,
                textAlign = TextAlign.Start, // toDo: aqui...  text mig horitzontal
                modifier = Modifier
                    .width(200.dp)
                    .height(100.dp)
                    .background(Color.Blue)
                    .constrainAs(position) {
                        top.linkTo(helloWorld.bottom, margin = 16.dp)
                        bottom.linkTo(bottomGuideHeder)
                        start.linkTo(icon.end)
                        end.linkTo(endGuideHeder)
                    })
        }
        ConstraintLayout{
            val topGuideBody = createGuidelineFromTop(0.1f)
            val bottomGuideBody = createGuidelineFromBottom(0.1f)
            val startGuideBody = createGuidelineFromStart(0.1f)
            val endGuideBody = createGuidelineFromEnd(0.1f)
            val (moblilIcon1, mobilText, ipVoiceText, textIcon1, textIcon2, divider, mobilIcon2, emailText) = createRefs()
            Image(
                painter = painterResource(id = R.drawable.phone),
                contentDescription = "phone icon",
                modifier = Modifier
                    .size(50.dp)
                    .constrainAs(moblilIcon1) {
                        top.linkTo(mobilText.top)
                        start.linkTo(startGuideBody)
                        end.linkTo(mobilText.start, margin = 16.dp)
                    })
            Text("674987456\nMobile",
                modifier = Modifier
                    .width(200.dp)
                    .height(90.dp)
                    .constrainAs(mobilText) {
                        top.linkTo(topGuideBody)
                        bottom.linkTo(ipVoiceText.top)
                        start.linkTo(moblilIcon1.end)
                        end.linkTo(textIcon1.start)
                    })
            Image(
                painter = painterResource(id = R.drawable.phone),
                contentDescription = "text icon 1",
                modifier = Modifier
                    .size(50.dp)
                    .constrainAs(textIcon1) {
                        top.linkTo(mobilText.top)
                        start.linkTo(mobilText.end)
                        end.linkTo(endGuideBody)
                    })
            Text("(+34) 334587656\nIP Voice",
                modifier = Modifier
                    .width(200.dp)
                    .height(90.dp)
                    .constrainAs(ipVoiceText) {
                        top.linkTo(mobilText.bottom)
                        bottom.linkTo(emailText.top)
                        start.linkTo(mobilText.start)
                        end.linkTo(textIcon2.start)
                    })
            Image(
                painter = painterResource(id = R.drawable.phone),
                contentDescription = "text icon 1",
                modifier = Modifier
                    .size(50.dp)
                    .constrainAs(textIcon2) {
                        top.linkTo(ipVoiceText.top)
                        start.linkTo(ipVoiceText.end)
                        end.linkTo(endGuideBody)
                    })
            Divider(
                color = Color.Gray,
                thickness = 1.dp,
                modifier = Modifier
                    .padding(vertical = 4.dp)
                    .width(300.dp)
                    .constrainAs(divider) {
                        top.linkTo(ipVoiceText.bottom)
                        start.linkTo(startGuideBody)
                        end.linkTo(endGuideBody)
                    }
            )
            Image(
                painter = painterResource(id = R.drawable.phone),
                contentDescription = "phone icon",
                modifier = Modifier
                    .size(50.dp)
                    .constrainAs(mobilIcon2) {
                        top.linkTo(divider.bottom, margin = 16.dp)
                        bottom.linkTo(bottomGuideBody)
                        start.linkTo(moblilIcon1.start)
                    })
            Text("name@domain.net\nWork",
                modifier = Modifier
                    .width(200.dp)
                    .height(90.dp)
                    .constrainAs(emailText) {
                        top.linkTo(mobilIcon2.top)
                        start.linkTo(mobilText.start)
                    }
            )
        }
        Row(
            //horizontalAlignment = Alignment.CenterHorizontally,
            //modifier = Modifier.width(375.dp),
            modifier = Modifier
                .fillMaxWidth()
                .padding(17.dp),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            var show: Boolean
            Button(
                onClick = { show = true },
                shape = RoundedCornerShape(5.dp),
                modifier = Modifier
            ) {
                Text(text = "BUTTON 1")
            }
            Button(
                onClick = { show = true },
                shape = RoundedCornerShape(5.dp),
                modifier = Modifier
            ) {
                Text(text = "BUTTON 2")
            }
            Button(
                onClick = { show = true },
                shape = RoundedCornerShape(5.dp),
                modifier = Modifier
            ) {
                Text(text = "BUTTON 3")
            }
        }
        Text(
            "",
            modifier = Modifier
                .padding(30.dp)
                .fillMaxWidth()
                .height(400.dp)
                .background(Color.Blue)
        )
    }
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    ConstraintLayout_v2Theme {
        ConstraintLoyout()
    }
}
